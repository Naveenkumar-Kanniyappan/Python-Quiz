import { Question } from '../types/Quiz';

export const quizData: Record<string, Question[]> = {
  "basic": [
        {"id": 1, "question": "Who developed Python?", "options": ["a) Guido van Rossum", "b) James Gosling", "c) Brendan Eich", "d) Bjarne Stroustrup"], "answer": "a"},
        {"id": 2, "question": "What is the correct file extension for Python files?", "options": ["a) .py", "b) .pt", "c) .python", "d) .p"], "answer": "a"},
        {"id": 3, "question": "How do you create a function in Python?", "options": ["a) def my_function():", "b) function my_function():", "c) create my_function():", "d) define my_function():"], "answer": "a"},
        {"id": 4, "question": "Which keyword is used to exit a loop in Python?", "options": ["a) stop", "b) break", "c) exit", "d) continue"], "answer": "b"},
        {"id": 5, "question": "What is the output of print('Hello'[1])?", "options": ["a) H", "b) e", "c) l", "d) o"], "answer": "b"},
        {"id": 6, "question": "Which of the following is NOT a valid variable name?", "options": ["a) my_var", "b) _my_var", "c) 2my_var", "d) myvar2"], "answer": "c"},
        {"id": 7, "question": "What is the output of print(type([]))?", "options": ["a) <class 'list'>", "b) <class 'array'>", "c) <class 'tuple'>", "d) <class 'NoneType'>"], "answer": "a"},
        {"id": 8, "question": "Which operator is used for exponentiation?", "options": ["a) ^", "b) **", "c) *", "d) //"], "answer": "b"},
        {"id": 9, "question": "What is a set in Python?", "options": ["a) An ordered collection that allows duplicate elements.", "b) An unordered collection that allows duplicate elements.", "c) An ordered collection with no duplicate elements.", "d) An unordered collection with no duplicate elements."], "answer": "d"},
        {"id": 10, "question": "How do you add an element to the end of a list?", "options": ["a) list.add(element)", "b) list.append(element)", "c) list.insert(element)", "d) list.push(element)"], "answer": "b"},
        {"id": 11, "question": "What is the output of print(5 / 2)?", "options": ["a) 2.5", "b) 2", "c) 2.0", "d) Error"], "answer": "a"},
        {"id": 12, "question": "What is the correct syntax to create a dictionary?", "options": ["a) my_dict = {'key': 'value'}", "b) my_dict = ['key': 'value']", "c) my_dict = ('key': 'value')", "d) my_dict = <'key': 'value'>"], "answer": "a"},
        {"id": 13, "question": "How do you create a comment in Python?", "options": ["a) // This is a comment", "b) # This is a comment", "c) /* This is a comment */", "d) `"], "answer": "b"},
        {"id": 14, "question": "Which statement is used to handle exceptions?", "options": ["a) try...catch", "b) try...except", "c) try...finally", "d) except...try"], "answer": "b"},
        {"id": 15, "question": "What is the purpose of the `__init__` method in a class?", "options": ["a) To delete an object.", "b) To initialize the object's attributes.", "c) To perform a final cleanup.", "d) To define a new class."], "answer": "b"},
        {"id": 16, "question": "How do you open a file named 'my_file.txt' in read mode?", "options": ["a) file = open('my_file.txt', 'w')", "b) file = open('my_file.txt', 'r')", "c) file.open('my_file.txt', 'r')", "d) open('my_file.txt')"], "answer": "b"},
        {"id": 17, "question": "What is the correct way to import a module named 'math'?", "options": ["a) import 'math'", "b) include math", "c) import math", "d) require math"], "answer": "c"},
        {"id": 18, "question": "What does the `len()` function return?", "options": ["a) The value of the first element.", "b) The number of elements in a sequence.", "c) The last element of a sequence.", "d) The maximum value in a sequence."], "answer": "b"},
        {"id": 19, "question": "Which of the following is a logical operator?", "options": ["a) +", "b) ==", "c) and", "d) *"], "answer": "c"},
        {"id": 20, "question": "What is a `string` in Python?", "options": ["a) A sequence of characters.", "b) A number with decimal places.", "c) A boolean value.", "d) A collection of items."], "answer": "a"},
        {"id": 21, "question": "What is the result of `3 + 4 * 2`?", "options": ["a) 14", "b) 11", "c) 10", "d) 9"], "answer": "b"},
        {"id": 22, "question": "Which of these data types is immutable?", "options": ["a) list", "b) dict", "c) tuple", "d) set"], "answer": "c"},
        {"id": 23, "question": "How do you get user input in Python?", "options": ["a) get_input()", "b) read()", "c) input()", "d) user_input()"], "answer": "c"},
        {"id": 24, "question": "What is the purpose of the `pass` statement?", "options": ["a) It raises an error.", "b) It exits a loop.", "c) It's a placeholder that does nothing.", "d) It skips the next line."], "answer": "c"},
        {"id": 25, "question": "Which loop is a \"for-each\" style loop in Python?", "options": ["a) for", "b) while", "c) do-while", "d) for-in"], "answer": "a"},
        {"id": 26, "question": "What does `x % 2` do?", "options": ["a) Divides x by 2.", "b) Calculates the power of x to 2.", "c) Checks if x is divisible by 2.", "d) Returns the remainder of x divided by 2."], "answer": "d"},
        {"id": 27, "question": "Which symbol is used for floor division?", "options": ["a) /", "b) //", "c) %", "d) **"], "answer": "b"},
        {"id": 28, "question": "What is the output of `print(10 < 5 or 5 > 3)`?", "options": ["a) True", "b) False", "c) Error", "d) 5 > 3"], "answer": "a"},
        {"id": 29, "question": "How do you remove an item from a list by its value?", "options": ["a) list.remove(item)", "b) list.delete(item)", "c) list.pop(item)", "d) list.erase(item)"], "answer": "a"},
        {"id": 30, "question": "What is a `boolean` data type?", "options": ["a) A sequence of characters.", "b) A number.", "c) A true/false value.", "d) A list of numbers."], "answer": "c"},
        {"id": 31, "question": "Which of these is used for a multi-line comment?", "options": ["a) `//`", "b) `''' `or `\"\"\"`", "c) `#`", "d) `/* */`"], "answer": "b"},
        {"id": 32, "question": "What is the index of the first element in a list?", "options": ["a) 1", "b) 0", "c) -1", "d) None"], "answer": "b"},
        {"id": 33, "question": "What is a `dictionary` in Python?", "options": ["a) An ordered collection of items.", "b) A collection of key-value pairs.", "c) An unordered collection of unique items.", "d) A sequence of integers."], "answer": "b"},
        {"id": 34, "question": "What is the output of `print(list(range(3)))`?", "options": ["a) [0, 1, 2]", "b) [1, 2, 3]", "c) [0, 1, 2, 3]", "d) Error"], "answer": "a"},
        {"id": 35, "question": "How do you check if a key exists in a dictionary?", "options": ["a) `if key in dict:`", "b) `if dict.has(key):`", "c) `if key exists dict:`", "d) `if dict[key]:`"], "answer": "a"},
        {"id": 36, "question": "Which of these will produce an error?", "options": ["a) `'5' + 5`", "b) `'hello' * 3`", "c) `10 / 2`", "d) `'10' + '20'`"], "answer": "a"},
        {"id": 37, "question": "What does `elif` stand for?", "options": ["a) else if", "b) else_if", "c) else_elif", "d) elif"], "answer": "a"},
        {"id": 38, "question": "Which of the following is an **identity** operator?", "options": ["a) `==`", "b) `is`", "c) `in`", "d) `or`"], "answer": "b"},
        {"id": 39, "question": "How do you find the data type of a variable `x`?", "options": ["a) `typeof(x)`", "b) `type(x)`", "c) `datatype(x)`", "d) `gettype(x)`"], "answer": "b"},
        {"id": 40, "question": "What is a `float`?", "options": ["a) An integer.", "b) A number with a decimal point.", "c) A text string.", "d) A boolean value."], "answer": "b"},
        {"id": 41, "question": "Which of these is the correct way to get the last item of a list `my_list`?", "options": ["a) `my_list[len(my_list)]`", "b) `my_list[last]`", "c) `my_list[-1]`", "d) `my_list[0]`"], "answer": "c"},
        {"id": 42, "question": "What is a `list` in Python?", "options": ["a) An ordered, immutable collection.", "b) An unordered, mutable collection.", "c) An ordered, mutable collection.", "d) A collection of unique items."], "answer": "c"},
        {"id": 43, "question": "What is the output of `print(type(10))`?", "options": ["a) <class 'float'>", "b) <class 'str'>", "c) <class 'int'>", "d) <class 'number'>"], "answer": "c"},
        {"id": 44, "question": "Which function is used to convert a value to a string?", "options": ["a) `int()`", "b) `str()`", "c) `float()`", "d) `list()`"], "answer": "b"},
        {"id": 45, "question": "How do you find the remainder of `10 / 3`?", "options": ["a) `10 // 3`", "b) `10 / 3`", "c) `10 % 3`", "d) `10 ** 3`"], "answer": "c"},
        {"id": 46, "question": "What does `pip` stand for?", "options": ["a) Python Interpreter Program", "b) Pip Installs Packages", "c) Package Installation Program", "d) Python's Internal Program"], "answer": "b"},
        {"id": 47, "question": "What is the purpose of a `while` loop?", "options": ["a) To iterate over a sequence.", "b) To execute code as long as a condition is true.", "c) To execute code once.", "d) To create a new function."], "answer": "b"},
        {"id": 48, "question": "How do you remove a key from a dictionary?", "options": ["a) `del my_dict['key']`", "b) `my_dict.remove('key')`", "c) `my_dict.pop('key')`", "d) Both a and c"], "answer": "d"},
        {"id": 49, "question": "What is a `tuple`?", "options": ["a) A mutable, ordered sequence.", "b) An immutable, ordered sequence.", "c) A mutable, unordered collection.", "d) An immutable, unordered collection."], "answer": "b"},
        {"id": 50, "question": "Which of the following is a correct way to slice a list from the second element to the fourth?", "options": ["a) `my_list[2:4]`", "b) `my_list[1:4]`", "c) `my_list[2:5]`", "d) `my_list[1:3]`"], "answer": "b"},
        {"id": 51, "question": "What is the output of `print(len('Python'))`?", "options": ["a) 5", "b) 6", "c) 7", "d) Error"], "answer": "b"},
        {"id": 52, "question": "How can you convert a list to a tuple?", "options": ["a) `tuple(my_list)`", "b) `my_list.to_tuple()`", "c) `list_to_tuple(my_list)`", "d) `my_list as tuple`"], "answer": "a"},
        {"id": 53, "question": "What does the `in` operator do?", "options": ["a) Checks if two values are identical.", "b) Checks if a value exists in a sequence.", "c) Checks if two values are equal.", "d) Checks if a value is a part of another value."], "answer": "b"},
        {"id": 54, "question": "What is the purpose of `print()`?", "options": ["a) To get input from the user.", "b) To save data to a file.", "c) To display output on the console.", "d) To create a new variable."], "answer": "c"},
        {"id": 55, "question": "Which of these is not a built-in data type in Python?", "options": ["a) `int`", "b) `float`", "c) `char`", "d) `list`"], "answer": "c"},
        {"id": 56, "question": "How do you find the largest number in a list?", "options": ["a) `list.max()`", "b) `max(my_list)`", "c) `my_list.largest()`", "d) `largest(my_list)`"], "answer": "b"},
        {"id": 57, "question": "Which of these is the correct way to get a boolean value of `False`?", "options": ["a) `False`", "b) `'False'`", "c) `false`", "d) `FALSE`"], "answer": "a"},
        {"id": 58, "question": "How do you get the current working directory?", "options": ["a) `os.cwd()`", "b) `os.getdir()`", "c) `os.getcwd()`", "d) `os.path.current()`"], "answer": "c"},
        {"id": 59, "question": "What is the output of `print(bool(0))`?", "options": ["a) True", "b) False", "c) 0", "d) 1"], "answer": "b"},
        {"id": 60, "question": "What is the purpose of a `for` loop?", "options": ["a) To create a new function.", "b) To repeat a block of code a specific number of times or over a sequence.", "c) To handle exceptions.", "d) To define a class."], "answer": "b"},
        {"id": 61, "question": "What is the result of `3 + 2 * 2`?", "options": ["a) 7", "b) 10", "c) 12", "d) 9"], "answer": "a"},
        {"id": 62, "question": "How do you convert a string to an integer?", "options": ["a) `str()`", "b) `int()`", "c) `float()`", "d) `convert_int()`"], "answer": "b"},
        {"id": 63, "question": "What is a `module`?", "options": ["a) A single Python file.", "b) A collection of functions and classes.", "c) A folder containing multiple Python files.", "d) Both a and b."], "answer": "d"},
        {"id": 64, "question": "Which of the following is NOT an arithmetic operator?", "options": ["a) `+`", "b) `-`", "c) `*`", "d) `is`"], "answer": "d"},
        {"id": 65, "question": "What is the output of `print('hello'.upper())`?", "options": ["a) hello", "b) Hello", "c) HELLO", "d) hELLO"], "answer": "c"},
        {"id": 66, "question": "What is the result of `10 // 3`?", "options": ["a) 3.33", "b) 3", "c) 4", "d) 1"], "answer": "b"},
        {"id": 67, "question": "What does `if __name__ == '__main__':` do?", "options": ["a) It's a comment.", "b) It checks the Python version.", "c) It executes code only when the script is run directly.", "d) It defines the main function."], "answer": "c"},
        {"id": 68, "question": "What is the output of `print(5 == 5)`?", "options": ["a) True", "b) False", "c) 5", "d) 5==5"], "answer": "a"},
        {"id": 69, "question": "How do you find the length of a string `s`?", "options": ["a) `s.length()`", "b) `len(s)`", "c) `s.size()`", "d) `length(s)`"], "answer": "b"},
        {"id": 70, "question": "What is a `list comprehension`?", "options": ["a) A way to create a list using a `for` loop in one line.", "b) A method for iterating through a list.", "c) A function for copying a list.", "d) A new data type."], "answer": "a"},
        {"id": 71, "question": "What is the correct syntax for a simple `if` statement?", "options": ["a) `if (condition):`", "b) `if condition:`", "c) `if condition then:`", "d) `if condition { }`"], "answer": "b"},
        {"id": 72, "question": "Which of these is a valid way to create an empty list?", "options": ["a) `my_list = ()`", "b) `my_list = []`", "c) `my_list = {}`", "d) `my_list = list()`"], "answer": "b"},
        {"id": 73, "question": "What is the output of `print('Python' * 2)`?", "options": ["a) PythonPython", "b) Python 2", "c) PythonPythonPython", "d) Error"], "answer": "a"},
        {"id": 74, "question": "How do you sort a list in ascending order?", "options": ["a) `my_list.sort()`", "b) `sort(my_list)`", "c) `my_list.ascending()`", "d) `my_list.order()`"], "answer": "a"},
        {"id": 75, "question": "What is a `dictionary` key?", "options": ["a) An index.", "b) A value.", "c) A unique identifier for a value.", "d) A number."], "answer": "c"},
        {"id": 76, "question": "Which of the following is used for an `if-else` statement?", "options": ["a) `if...else`", "b) `if...elif...else`", "c) `if...then...else`", "d) `if/else`"], "answer": "a"},
        {"id": 77, "question": "What is the output of `print(int(3.9))`?", "options": ["a) 3.9", "b) 3", "c) 4", "d) Error"], "answer": "b"},
        {"id": 78, "question": "What is the result of `'Python' == 'python'`?", "options": ["a) True", "b) False", "c) Error", "d) 'Python'"], "answer": "b"},
        {"id": 79, "question": "Which of these functions can be used to add items to a set?", "options": ["a) `add()`", "b) `append()`", "c) `insert()`", "d) `push()`"], "answer": "a"},
        {"id": 80, "question": "What is the correct way to get the value associated with a key `name` from a dictionary `person`?", "options": ["a) `person.get('name')`", "b) `person.value('name')`", "c) `person['name']`", "d) Both a and c"], "answer": "d"},
        {"id": 81, "question": "What is the output of `print(bool(''))`?", "options": ["a) True", "b) False", "c) Error", "d) None"], "answer": "b"},
        {"id": 82, "question": "What does `import os` do?", "options": ["a) It creates a new folder.", "b) It imports a module for interacting with the operating system.", "c) It imports the `os` library from the internet.", "d) It renames a file."], "answer": "b"},
        {"id": 83, "question": "Which of the following is a comparison operator?", "options": ["a) `+`", "b) `*`", "c) `!=`", "d) `=`"], "answer": "c"},
        {"id": 84, "question": "How do you check if a number is even?", "options": ["a) `if num / 2 == 0:`", "b) `if num % 2 == 0:`", "c) `if num // 2 == 0:`", "d) `if num.is_even():`"], "answer": "b"},
        {"id": 85, "question": "What is a `byte` data type?", "options": ["a) A sequence of integers.", "b) A mutable sequence of bytes.", "c) A sequence of binary data.", "d) A text string."], "answer": "c"},
        {"id": 86, "question": "How do you remove the first item from a list?", "options": ["a) `my_list.pop(0)`", "b) `del my_list[0]`", "c) `my_list.remove(my_list[0])`", "d) All of the above"], "answer": "d"},
        {"id": 87, "question": "What does a `SyntaxError` mean?", "options": ["a) The code has a logical mistake.", "b) The code has an invalid structure.", "c) The program ran out of memory.", "d) The code is too slow."], "answer": "b"},
        {"id": 88, "question": "Which of these is the correct way to define a list?", "options": ["a) `[1, 2, 3]`", "b) `(1, 2, 3)`", "c) `{1, 2, 3}`", "d) `{1: 2, 3: 4}`"], "answer": "a"},
        {"id": 89, "question": "What is the purpose of the `try...except` block?", "options": ["a) To define a new function.", "b) To handle errors gracefully.", "c) To create a loop.", "d) To check for a condition."], "answer": "b"},
        {"id": 90, "question": "What does the `break` statement do inside a `while` loop?", "options": ["a) Skips the current iteration.", "b) Terminates the loop.", "c) Restarts the loop.", "d) Goes to the next iteration."], "answer": "b"},
        {"id": 91, "question": "How can you find the type of the value of a key 'age' in a dictionary 'user'?", "options": ["a) `type(user['age'])`", "b) `user.type('age')`", "c) `user.age.type()`", "d) `typeof(user.age)`"], "answer": "a"},
        {"id": 92, "question": "What is the output of `print(1 == '1')`?", "options": ["a) True", "b) False", "c) 1", "d) Error"], "answer": "b"},
        {"id": 93, "question": "Which operator is used to join two strings?", "options": ["a) `+`", "b) `-`", "c) `*`", "d) `/`"], "answer": "a"},
        {"id": 94, "question": "What is the output of `print('hello' + 'world')`?", "options": ["a) hello world", "b) helloworld", "c) hello-world", "d) Error"], "answer": "b"},
        {"id": 95, "question": "How do you call a function named `greet()`?", "options": ["a) `greet`", "b) `greet[]`", "c) `greet()`", "d) `call greet`"], "answer": "c"},
        {"id": 96, "question": "What is the purpose of a `docstring`?", "options": ["a) To create a comment.", "b) To define a variable.", "c) To document a function, class, or module.", "d) To store data."], "answer": "c"},
        {"id": 97, "question": "What is the output of `print(2 ** 3)`?", "options": ["a) 6", "b) 8", "c) 9", "d) 5"], "answer": "b"},
        {"id": 98, "question": "How do you reverse a list `my_list`?", "options": ["a) `my_list.reverse()`", "b) `reverse(my_list)`", "c) `my_list[::-1]`", "d) All of the above"], "answer": "d"},
        {"id": 99, "question": "Which of these is used for a string literal?", "options": ["a) `'single quotes'`", "b) `\"double quotes\"`", "c) `'''triple quotes'''`", "d) All of the above"], "answer": "d"},
        {"id": 100, "question": "What does `None` represent?", "options": ["a) The number zero.", "b) The boolean value `False`.", "c) A placeholder for the absence of a value.", "d) An empty string."], "answer": "c"},
    ],
    "intermediate": [
        {"id": 101, "question": "What is a decorator in Python?", "options": ["a) A design pattern for enhancing a function's behavior.", "b) A special type of class.", "c) A way to handle errors.", "d) A loop control structure."], "answer": "a"},
        {"id": 102, "question": "What is a generator in Python?", "options": ["a) A function that returns a value and exits.", "b) A function that yields a value and can be resumed later.", "c) A class that generates random numbers.", "d) A decorator."], "answer": "b"},
        {"id": 103, "question": "What is the primary purpose of a `lambda` function?", "options": ["a) To create a named function.", "b) To create an anonymous, single-expression function.", "c) To define a new class.", "d) To handle exceptions."], "answer": "b"},
        {"id": 104, "question": "What is the purpose of `*args` in a function definition?", "options": ["a) To pass a variable number of keyword arguments.", "b) To pass a variable number of non-keyword arguments.", "c) To pass a dictionary of arguments.", "d) To unpack a list into arguments."], "answer": "b"},
        {"id": 105, "question": "What is the purpose of `**kwargs` in a function definition?", "options": ["a) To pass a variable number of non-keyword arguments.", "b) To pass a variable number of keyword arguments.", "c) To pass a list of arguments.", "d) To unpack a dictionary into arguments."], "answer": "b"},
        {"id": 106, "question": "How do you handle multiple exceptions in one `except` block?", "options": ["a) `except (ValueError, TypeError):`", "b) `except ValueError and TypeError:`", "c) `except ValueError, TypeError:`", "d) `except [ValueError, TypeError]:`"], "answer": "a"},
        {"id": 107, "question": "What does a list comprehension like `[x**2 for x in range(3)]` produce?", "options": ["a) `[0, 1, 4]`", "b) `[0, 1, 2, 3]`", "c) `(0, 1, 4)`", "d) `0, 1, 4`"], "answer": "a"},
        {"id": 108, "question": "Which method is used to create a shallow copy of a list?", "options": ["a) `my_list.copy()`", "b) `my_list.deepcopy()`", "c) `copy(my_list)`", "d) `my_list[:]`"], "answer": "d"},
        {"id": 109, "question": "What is the main difference between `is` and `==`?", "options": ["a) `is` checks for value equality, `==` checks for identity.", "b) `is` checks for object identity, `==` checks for value equality.", "c) They are identical and can be used interchangeably.", "d) `is` is a logical operator, `==` is a comparison operator."], "answer": "b"},
        {"id": 110, "question": "What is a `classmethod`?", "options": ["a) A method that belongs to a specific object instance.", "b) A method that belongs to the class itself, not an instance.", "c) A method that can only be called from an instance.", "d) A method for a decorator."], "answer": "b"},
        {"id": 111, "question": "What is a `staticmethod`?", "options": ["a) A method that takes the instance as the first argument.", "b) A method that takes the class as the first argument.", "c) A method that doesn't implicitly pass `self` or `cls`.", "d) A method that cannot be overridden."], "answer": "c"},
        {"id": 112, "question": "How do you access the last element of a list using negative indexing?", "options": ["a) `list[-0]`", "b) `list[-1]`", "c) `list[end]`", "d) `list[last]`"], "answer": "b"},
        {"id": 113, "question": "What is the result of `''.join(['a', 'b', 'c'])`?", "options": ["a) `['a', 'b', 'c']`", "b) `'abc'`", "c) `'a b c'`", "d) `'a, b, c'`"], "answer": "b"},
        {"id": 114, "question": "What does the `yield` keyword do?", "options": ["a) It returns a value and terminates the function.", "b) It pauses a generator function and yields a value.", "c) It raises an exception.", "d) It defines a class method."], "answer": "b"},
        {"id": 115, "question": "What is the purpose of the `collections` module?", "options": ["a) To handle file operations.", "b) To provide high-performance container data types beyond the built-in ones.", "c) To handle network requests.", "d) To manage threads."], "answer": "b"},
        {"id": 116, "question": "What is a `virtual environment` in Python?", "options": ["a) A tool for deploying web applications.", "b) An isolated Python environment to manage project-specific dependencies.", "c) A way to run Python code in a web browser.", "d) A container for virtual machines."], "answer": "b"},
        {"id": 117, "question": "Which built-in function is used to iterate over a sequence and get both the index and the value?", "options": ["a) `enumerate()`", "b) `zip()`", "c) `list()`", "d) `iter()`"], "answer": "a"},
        {"id": 118, "question": "How do you check if an object is an instance of a specific class?", "options": ["a) `type(obj) == MyClass`", "b) `obj.isinstance(MyClass)`", "c) `isinstance(obj, MyClass)`", "d) `obj.class()`"], "answer": "c"},
        {"id": 119, "question": "What is a `deque`?", "options": ["a) A dictionary with ordered keys.", "b) A list that can be used as a queue and a stack.", "c) An ordered set.", "d) A type of tuple."], "answer": "b"},
        {"id": 120, "question": "What is the purpose of the `__str__` method?", "options": ["a) To convert an object to a string for official representation.", "b) To convert an object to a string for a human-readable representation.", "c) To check if an object is a string.", "d) To get the type of an object."], "answer": "b"},
        {"id": 121, "question": "What is a `virtual environment`?", "options": ["a) A tool for deploying web applications.", "b) An isolated Python environment to manage project-specific dependencies.", "c) A way to run Python code in a web browser.", "d) A container for virtual machines."], "answer": "b"},
        {"id": 122, "question": "Which built-in function is used to iterate over two or more sequences at the same time?", "options": ["a) `enumerate()`", "b) `zip()`", "c) `list()`", "d) `iter()`"], "answer": "b"},
        {"id": 123, "question": "What is the purpose of the `map()` function?", "options": ["a) To create a new dictionary.", "b) To apply a function to all items in an iterable.", "c) To filter a list.", "d) To sort a list."], "answer": "b"},
        {"id": 124, "question": "What is the purpose of the `filter()` function?", "options": ["a) To create a new list.", "b) To filter an iterable based on a function's return value.", "c) To apply a function to all items in an iterable.", "d) To sort a list."], "answer": "b"},
        {"id": 125, "question": "What is the difference between a list and a tuple?", "options": ["a) Lists are immutable, tuples are mutable.", "b) Lists are ordered, tuples are unordered.", "c) Lists are mutable, tuples are immutable.", "d) Lists are faster to access than tuples."], "answer": "c"},
        {"id": 126, "question": "What is a `docstring`?", "options": ["a) A single-line comment.", "b) A multi-line string used for function, module, or class documentation.", "c) A string that acts as an error message.", "d) A string literal."], "answer": "b"},
        {"id": 127, "question": "What is a **ternary operator** in Python?", "options": ["a) `a if condition else b`", "b) `if a then b else c`", "c) `a ? b : c`", "d) `if condition: a else: b`"], "answer": "a"},
        {"id": 128, "question": "Which of these is a correct way to get a slice of a list from the beginning up to index 3 (not including 3)?", "options": ["a) `my_list[:3]`", "b) `my_list[3:]`", "c) `my_list[0:3]`", "d) Both a and c"], "answer": "d"},
        {"id": 129, "question": "What is the output of `[i for i in range(5) if i % 2 == 0]`?", "options": ["a) `[0, 2, 4]`", "b) `[1, 3]`", "c) `[0, 1, 2, 3, 4]`", "d) `[2, 4]`"], "answer": "a"},
        {"id": 130, "question": "What is a `namedtuple`?", "options": ["a) A tuple with a name.", "b) A factory function for creating tuple subclasses with named fields.", "c) A special list.", "d) An immutable dictionary."], "answer": "c"},
        {"id": 131, "question": "Which module is commonly used for making HTTP requests?", "options": ["a) `requests`", "b) `http`", "c) `web`", "d) `url`"], "answer": "a"},
        {"id": 132, "question": "What is the purpose of the `os.path` module?", "options": ["a) To interact with operating system files and directories.", "b) To handle web server paths.", "c) To manage file permissions.", "d) To find the path to an installed module."], "answer": "a"},
        {"id": 133, "question": "How do you define a function that takes a variable number of keyword arguments?", "options": ["a) `def func(*args):`", "b) `def func(**kwargs):`", "c) `def func(*k):`", "d) `def func(**v):`"], "answer": "b"},
        {"id": 134, "question": "What is the output of `print(type(lambda x: x))`?", "options": ["a) `function`", "b) `lambda`", "c) `<class 'function'>`", "d) `<class 'lambda'>`"], "answer": "c"},
        {"id": 135, "question": "What is the purpose of the `__repr__` method?", "options": ["a) To provide a human-readable string representation of an object.", "b) To provide a developer-friendly string representation of an object.", "c) To represent an object as a class.", "d) To represent an object as a dictionary."], "answer": "b"},
        {"id": 136, "question": "What is a **list comprehension**?", "options": ["a) A way to create a list using a `for` loop in one line.", "b) A method for iterating through a list.", "c) A function for copying a list.", "d) A new data type."], "answer": "a"},
        {"id": 137, "question": "What is the output of `print(any([False, False, True]))`?", "options": ["a) `True`", "b) `False`", "c) `None`", "d) `1`"], "answer": "a"},
        {"id": 138, "question": "What is the output of `print(all([True, True, False]))`?", "options": ["a) `True`", "b) `False`", "c) `None`", "d) `0`"], "answer": "b"},
        {"id": 139, "question": "What is a `global` keyword used for?", "options": ["a) To define a new variable.", "b) To declare a variable in a function that modifies a global variable.", "c) To import a global module.", "d) To make a variable accessible in a class."], "answer": "b"},
        {"id": 140, "question": "What is the purpose of the `with` statement?", "options": ["a) To create a new function.", "b) To ensure resources are properly managed (e.g., file closing).", "c) To handle exceptions.", "d) To define a new class."], "answer": "b"},
        {"id": 141, "question": "Which decorator is used to define a property getter?", "options": ["a) `@property`", "b) `@getter`", "c) `@prop`", "d) `@get`"], "answer": "a"},
        {"id": 142, "question": "What is the result of `['a', 'b', 'c'].pop()`?", "options": ["a) `['a', 'b']`", "b) `'c'`", "c) `['a', 'b', 'c']`", "d) `None`"], "answer": "b"},
        {"id": 143, "question": "What is the result of `['a', 'b', 'c'].pop(0)`?", "options": ["a) `['b', 'c']`", "b) `'a'`", "c) `['a', 'b', 'c']`", "d) `None`"], "answer": "b"},
        {"id": 144, "question": "Which of these is used for a multi-line comment?", "options": ["a) `//`", "b) `''' `or `\"\"\"`", "c) `#`", "d) `/* */`"], "answer": "b"},
        {"id": 145, "question": "What is the primary purpose of a `set`?", "options": ["a) To store a sequence of items.", "b) To store unique, unordered items.", "c) To store key-value pairs.", "d) To store mutable items."], "answer": "b"},
        {"id": 146, "question": "What is a `f-string`?", "options": ["a) A type of string that cannot be modified.", "b) A way to format strings with embedded expressions.", "c) A string with file path information.", "d) A string with HTML tags."], "answer": "b"},
        {"id": 147, "question": "What is the output of `print(dir([]))`?", "options": ["a) A list of all methods and attributes of a list.", "b) An empty list.", "c) An error.", "d) A list of all modules."], "answer": "a"},
        {"id": 148, "question": "What is a **mutable** data type?", "options": ["a) A type that can be changed after creation.", "b) A type that cannot be changed after creation.", "c) A type that can be used as a dictionary key.", "d) A type that is immutable."], "answer": "a"},
        {"id": 149, "question": "What is a `dict comprehension`?", "options": ["a) A way to create a dictionary using a `for` loop in one line.", "b) A method for iterating through a dictionary.", "c) A function for copying a dictionary.", "d) A new data type."], "answer": "a"},
        {"id": 150, "question": "What is the output of `print({1, 2, 3} & {3, 4, 5})`?", "options": ["a) `{1, 2, 3, 4, 5}`", "b) `{3}`", "c) `{1, 2, 4, 5}`", "d) `{}`"], "answer": "b"},
        {"id": 151, "question": "What is the output of `print('hello'[0:2])`?", "options": ["a) `he`", "b) `hel`", "c) `lo`", "d) `h`"], "answer": "a"},
        {"id": 152, "question": "What is the purpose of the `del` keyword?", "options": ["a) To delete a file.", "b) To delete an object, variable, or item.", "c) To clear a list.", "d) To remove a function."], "answer": "b"},
        {"id": 153, "question": "Which of the following is a way to create a generator?", "options": ["a) `(i for i in range(5))`", "b) `[i for i in range(5)]`", "c) `{i for i in range(5)}`", "d) `{i: i for i in range(5)}`"], "answer": "a"},
        {"id": 154, "question": "What is the output of `print(range(10))`?", "options": ["a) `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`", "b) `range(0, 10)`", "c) `Error`", "d) `10`"], "answer": "b"},
        {"id": 155, "question": "What is a `classmethod`?", "options": ["a) A method that belongs to a specific object instance.", "b) A method that belongs to the class itself, not an instance.", "c) A method that can only be called from an instance.", "d) A method for a decorator."], "answer": "b"},
        {"id": 156, "question": "What is the purpose of the `super()` function?", "options": ["a) To call a method from a parent class.", "b) To call a method from a child class.", "c) To create a new class.", "d) To create a new object."], "answer": "a"},
        {"id": 157, "question": "What does a `TypeError` typically indicate?", "options": ["a) An invalid syntax.", "b) An operation on an object of an inappropriate type.", "c) A file not found error.", "d) An error in the loop."], "answer": "b"},
        {"id": 158, "question": "Which of these is the correct way to merge two dictionaries?", "options": ["a) `dict1 + dict2`", "b) `dict1.update(dict2)`", "c) `dict1.merge(dict2)`", "d) `dict(dict1, dict2)`"], "answer": "b"},
        {"id": 159, "question": "What is a **ternary operator** in Python?", "options": ["a) `a if condition else b`", "b) `if a then b else c`", "c) `a ? b : c`", "d) `if condition: a else: b`"], "answer": "a"},
        {"id": 160, "question": "What is the purpose of the `with` statement?", "options": ["a) To create a new function.", "b) To ensure resources are properly managed (e.g., file closing).", "c) To handle exceptions.", "d) To define a new class."], "answer": "b"},
        {"id": 161, "question": "What is the output of `print(3 * 'ab')`?", "options": ["a) `ababab`", "b) `a b`", "c) `ab`", "d) `Error`"], "answer": "a"},
        {"id": 162, "question": "Which of these is a correct way to get the number of items in a dictionary?", "options": ["a) `dict.length()`", "b) `len(my_dict)`", "c) `my_dict.size()`", "d) `my_dict.count()`"], "answer": "b"},
        {"id": 163, "question": "What is a **list comprehension**?", "options": ["a) A way to create a list using a `for` loop in one line.", "b) A method for iterating through a list.", "c) A function for copying a list.", "d) A new data type."], "answer": "a"},
        {"id": 164, "question": "What is the purpose of `pip`?", "options": ["a) To install Python modules.", "b) To run Python code.", "c) To create virtual environments.", "d) To manage data."], "answer": "a"},
        {"id": 165, "question": "What is the output of `print(isinstance(1, int))`?", "options": ["a) `True`", "b) `False`", "c) `1`", "d) `int`"], "answer": "a"},
        {"id": 166, "question": "Which of these methods removes an item from a set?", "options": ["a) `pop()`", "b) `remove()`", "c) `discard()`", "d) All of the above"], "answer": "d"},
        {"id": 167, "question": "What is a `namedtuple`?", "options": ["a) A tuple with a name.", "b) A factory function for creating tuple subclasses with named fields.", "c) A special list.", "d) An immutable dictionary."], "answer": "b"},
        {"id": 168, "question": "What is the output of `print({1: 'a', 2: 'b'}.keys())`?", "options": ["a) `[1, 2]`", "b) `dict_keys([1, 2])`", "c) `(1, 2)`", "d) `{1, 2}`"], "answer": "b"},
        {"id": 169, "question": "What is the purpose of the `pass` statement?", "options": ["a) It raises an error.", "b) It exits a loop.", "c) It's a placeholder that does nothing.", "d) It skips the next line."], "answer": "c"},
        {"id": 170, "question": "How do you define a function that takes a variable number of keyword arguments?", "options": ["a) `def func(*args):`", "b) `def func(**kwargs):`", "c) `def func(*k):`", "d) `def func(**v):`"], "answer": "b"},
        {"id": 171, "question": "What is the output of `print('hello'[::-1])`?", "options": ["a) `olleh`", "b) `hello`", "c) `h`", "d) `Error`"], "answer": "a"},
        {"id": 172, "question": "What is the difference between a list and a tuple?", "options": ["a) Lists are immutable, tuples are mutable.", "b) Lists are ordered, tuples are unordered.", "c) Lists are mutable, tuples are immutable.", "d) Lists are faster to access than tuples."], "answer": "c"},
        {"id": 173, "question": "What does a `SyntaxError` mean?", "options": ["a) The code has a logical mistake.", "b) The code has an invalid structure.", "c) The program ran out of memory.", "d) The code is too slow."], "answer": "b"},
        {"id": 174, "question": "Which of these is a valid way to create an empty list?", "options": ["a) `my_list = ()`", "b) `my_list = []`", "c) `my_list = {}`", "d) `my_list = list()`"], "answer": "b"},
        {"id": 175, "question": "What is the output of `print(type(lambda x: x))`?", "options": ["a) `function`", "b) `lambda`", "c) `<class 'function'>`", "d) `<class 'lambda'>`"], "answer": "c"},
        {"id": 176, "question": "What is the purpose of the `__str__` method?", "options": ["a) To convert an object to a string for official representation.", "b) To convert an object to a string for a human-readable representation.", "c) To check if an object is a string.", "d) To get the type of an object."], "answer": "b"},
        {"id": 177, "question": "What is a `virtual environment` in Python?", "options": ["a) A tool for deploying web applications.", "b) An isolated Python environment to manage project-specific dependencies.", "c) A way to run Python code in a web browser.", "d) A container for virtual machines."], "answer": "b"},
        {"id": 178, "question": "What is a `f-string`?", "options": ["a) A type of string that cannot be modified.", "b) A way to format strings with embedded expressions.", "c) A string with file path information.", "d) A string with HTML tags."], "answer": "b"},
        {"id": 179, "question": "What is a `list comprehension`?", "options": ["a) A way to create a list using a `for` loop in one line.", "b) A method for iterating through a list.", "c) A function for copying a list.", "d) A new data type."], "answer": "a"},
        {"id": 180, "question": "What is the output of `print({1, 2, 3} | {3, 4, 5})`?", "options": ["a) `{1, 2, 3, 4, 5}`", "b) `{3}`", "c) `{1, 2, 4, 5}`", "d) `{}`"], "answer": "a"},
        {"id": 181, "question": "What is the output of `print(isinstance(1.0, int))`?", "options": ["a) `True`", "b) `False`", "c) `1.0`", "d) `Error`"], "answer": "b"},
        {"id": 182, "question": "What is the purpose of the `os` module?", "options": ["a) To interact with the operating system.", "b) To handle web server paths.", "c) To manage file permissions.", "d) To find the path to an installed module."], "answer": "a"},
        {"id": 183, "question": "What is a **mutable** data type?", "options": ["a) A type that can be changed after creation.", "b) A type that cannot be changed after creation.", "c) A type that can be used as a dictionary key.", "d) A type that is immutable."], "answer": "a"},
        {"id": 184, "question": "What is the output of `print('Python'.find('t'))`?", "options": ["a) `2`", "b) `1`", "c) `3`", "d) `Error`"], "answer": "a"},
        {"id": 185, "question": "What does a `ZeroDivisionError` mean?", "options": ["a) A division by zero occurred.", "b) A type error.", "c) An invalid syntax.", "d) A logical error."], "answer": "a"},
        {"id": 186, "question": "What is the correct syntax for a simple `if...else` statement?", "options": ["a) `if condition: ... else: ...`", "b) `if(condition) { ... } else { ... }`", "c) `if condition then ... else ...`", "d) `if/else`"], "answer": "a"},
        {"id": 187, "question": "What is the output of `print('hello'.capitalize())`?", "options": ["a) `HELLO`", "b) `hello`", "c) `Hello`", "d) `hELLO`"], "answer": "c"},
        {"id": 188, "question": "Which of these is used for a string literal?", "options": ["a) `'single quotes'`", "b) `\"double quotes\"`", "c) `'''triple quotes'''`", "d) All of the above"], "answer": "d"},
        {"id": 189, "question": "What does `None` represent?", "options": ["a) The number zero.", "b) The boolean value `False`.", "c) A placeholder for the absence of a value.", "d) An empty string."], "answer": "c"},
        {"id": 190, "question": "What is the purpose of a `docstring`?", "options": ["a) To create a comment.", "b) To define a variable.", "c) To document a function, class, or module.", "d) To store data."], "answer": "c"},
        {"id": 191, "question": "How do you call a function named `greet()`?", "options": ["a) `greet`", "b) `greet[]`", "c) `greet()`", "d) `call greet`"], "answer": "c"},
        {"id": 192, "question": "What is the output of `print(2 ** 3)`?", "options": ["a) 6", "b) 8", "c) 9", "d) 5"], "answer": "b"},
        {"id": 193, "question": "How do you reverse a list `my_list`?", "options": ["a) `my_list.reverse()`", "b) `reverse(my_list)`", "c) `my_list[::-1]`", "d) All of the above"], "answer": "d"},
        {"id": 194, "question": "What is a `dictionary` key?", "options": ["a) An index.", "b) A value.", "c) A unique identifier for a value.", "d) A number."], "answer": "c"},
        {"id": 195, "question": "What is the purpose of the `try...except` block?", "options": ["a) To define a new function.", "b) To handle errors gracefully.", "c) To create a loop.", "d) To check for a condition."], "answer": "b"},
        {"id": 196, "question": "What is a `set`?", "options": ["a) An ordered collection that allows duplicate elements.", "b) An unordered collection that allows duplicate elements.", "c) An ordered collection with no duplicate elements.", "d) An unordered collection with no duplicate elements."], "answer": "d"},
        {"id": 197, "question": "What is the output of `print(3 * 'ab')`?", "options": ["a) `ababab`", "b) `a b`", "c) `ab`", "d) `Error`"], "answer": "a"},
        {"id": 198, "question": "What is the output of `print(len('Python'))`?", "options": ["a) 5", "b) 6", "c) 7", "d) Error"], "answer": "b"},
        {"id": 199, "question": "What is the purpose of `pip`?", "options": ["a) To install Python modules.", "b) To run Python code.", "c) To create virtual environments.", "d) To manage data."], "answer": "a"},
        {"id": 200, "question": "What is the output of `print(isinstance(1, float))`?", "options": ["a) `True`", "b) `False`", "c) `1`", "d) `float`"], "answer": "b"},
    ],
    "advanced": [
        {"id": 201, "question": "What is the Global Interpreter Lock (GIL)?", "options": ["a) A lock that allows only one thread to execute at a time.", "b) A feature that allows parallel execution.", "c) A type of security feature.", "d) A module for multithreading."], "answer": "a"},
        {"id": 202, "question": "What is the difference between a `process` and a `thread`?", "options": ["a) A process is lightweight, a thread is heavy.", "b) A process has its own memory space, while threads within a process share memory.", "c) A thread has its own memory space, while processes share memory.", "d) They are identical."], "answer": "b"},
        {"id": 203, "question": "What is a `metaclass`?", "options": ["a) A class that inherits from another class.", "b) A class whose instances are also classes.", "c) A special type of function.", "d) A class with no methods."], "answer": "b"},
        {"id": 204, "question": "What is a `descriptor`?", "options": ["a) A class that implements the descriptor protocol (`__get__`, `__set__`, `__delete__`).", "b) A special type of dictionary.", "c) A function that describes a class.", "d) An attribute of a class."], "answer": "a"},
        {"id": 205, "question": "What is the purpose of the `__call__` method?", "options": ["a) To make an object callable like a function.", "b) To call a method from a parent class.", "c) To call a method from a child class.", "d) To define a new function."], "answer": "a"},
        {"id": 206, "question": "How can you create a dynamic, new class at runtime?", "options": ["a) `type('MyClass', (object,), {})`", "b) `class MyClass(): pass`", "c) `create_class('MyClass')`", "d) `new_class('MyClass')`"], "answer": "a"},
        {"id": 207, "question": "What is the difference between `__init__` and `__new__`?", "options": ["a) `__init__` creates the instance, `__new__` initializes it.", "b) `__new__` creates the instance, `__init__` initializes it.", "c) They are identical.", "d) `__new__` is only used for singletons."], "answer": "b"},
        {"id": 208, "question": "What is a `GIL`?", "options": ["a) A lock that allows only one thread to execute at a time.", "b) A feature that allows parallel execution.", "c) A type of security feature.", "d) A module for multithreading."], "answer": "a"},
        {"id": 209, "question": "Which module is used for asynchronous programming?", "options": ["a) `threading`", "b) `multiprocessing`", "c) `asyncio`", "d) `requests`"], "answer": "c"},
        {"id": 210, "question": "What is the purpose of the `async`/`await` keywords?", "options": ["a) To handle synchronous code.", "b) To define and run coroutines for asynchronous programming.", "c) To handle multithreading.", "d) To handle errors."], "answer": "b"},
        {"id": 211, "question": "What is the output of `print('hello' is 'hello')` in CPython?", "options": ["a) `True`", "b) `False`", "c) `Error`", "d) `None`"], "answer": "a"},
        {"id": 212, "question": "What is the purpose of `__slots__` in a class?", "options": ["a) To create a new method.", "b) To save memory by explicitly declaring object attributes.", "c) To make a class immutable.", "d) To make a class a static class."], "answer": "b"},
        {"id": 213, "question": "What is a `weak reference`?", "options": ["a) A reference that does not prevent an object from being garbage collected.", "b) A reference to a variable that is weak.", "c) A reference to a function.", "d) A reference to a global variable."], "answer": "a"},
        {"id": 214, "question": "What does a `TypeError` typically indicate?", "options": ["a) An invalid syntax.", "b) An operation on an object of an inappropriate type.", "c) A file not found error.", "d) An error in the loop."], "answer": "b"},
        {"id": 215, "question": "What is a `context manager`?", "options": ["a) A special dictionary.", "b) An object that defines the `__enter__` and `__exit__` methods.", "c) A function that manages threads.", "d) A class for handling exceptions."], "answer": "b"},
        {"id": 216, "question": "What is the purpose of `functools.partial`?", "options": ["a) To create a new class.", "b) To fix a function's arguments to a specific value.", "c) To combine two functions.", "d) To create a new function."], "answer": "b"},
        {"id": 217, "question": "What is `monkey patching`?", "options": ["a) Modifying a class or module at runtime.", "b) Fixing bugs in an application.", "c) Creating a new class.", "d) A type of security patch."], "answer": "a"},
        {"id": 218, "question": "What is a `dataclass`?", "options": ["a) A class for storing data.", "b) A class with no methods.", "c) A decorator that automatically generates special methods for classes.", "d) A class for handling data."], "answer": "c"},
        {"id": 219, "question": "What is `type hinting` (PEP 484)?", "options": ["a) A way to enforce data types at runtime.", "b) A way to specify variable types for better readability and static analysis.", "c) A type of error.", "d) A way to create new data types."], "answer": "b"},
        {"id": 220, "question": "What is the purpose of the `collections.namedtuple`?", "options": ["a) A tuple with a name.", "b) A factory function for creating tuple subclasses with named fields.", "c) A special list.", "d) An immutable dictionary."], "answer": "b"},
        {"id": 221, "question": "What is a `generator`?", "options": ["a) A function that returns a value and exits.", "b) A function that yields a value and can be resumed later.", "c) A class that generates random numbers.", "d) A decorator."], "answer": "b"},
        {"id": 222, "question": "What is a `property`?", "options": ["a) An attribute of a class.", "b) A way to give a class attribute the behavior of a method.", "c) A method that belongs to a specific object instance.", "d) A special type of function."], "answer": "b"},
        {"id": 223, "question": "What is a `classmethod`?", "options": ["a) A method that belongs to a specific object instance.", "b) A method that belongs to the class itself, not an instance.", "c) A method that can only be called from an instance.", "d) A method for a decorator."], "answer": "b"},
        {"id": 224, "question": "What is a `staticmethod`?", "options": ["a) A method that takes the instance as the first argument.", "b) A method that takes the class as the first argument.", "c) A method that doesn't implicitly pass `self` or `cls`.", "d) A method that cannot be overridden."], "answer": "c"},
        {"id": 225, "question": "How do you check for object identity?", "options": ["a) `==`", "b) `is`", "c) `in`", "d) `or`"], "answer": "b"},
        {"id": 226, "question": "What is the `super()` function used for?", "options": ["a) To call a method from a parent class.", "b) To call a method from a child class.", "c) To create a new class.", "d) To create a new object."], "answer": "a"},
        {"id": 227, "question": "What is a `descriptor`?", "options": ["a) A class that implements the descriptor protocol (`__get__`, `__set__`, `__delete__`).", "b) A special type of dictionary.", "c) A function that describes a class.", "d) An attribute of a class."], "answer": "a"},
        {"id": 228, "question": "What is the purpose of `functools.wraps`?", "options": ["a) To create a new class.", "b) To preserve the original function's metadata when using decorators.", "c) To wrap a function with another function.", "d) To decorate a class."], "answer": "b"},
        {"id": 229, "question": "What is a `closure`?", "options": ["a) A function that returns another function.", "b) A function that has access to variables from an outer function's scope, even after the outer function has finished executing.", "c) A function that is created at runtime.", "d) A function that cannot be modified."], "answer": "b"},
        {"id": 230, "question": "What is the output of `print(isinstance(1, int))`?", "options": ["a) `True`", "b) `False`", "c) `1`", "d) `int`"], "answer": "a"},
        {"id": 231, "question": "What is the purpose of the `gc` module?", "options": ["a) To manage garbage collection.", "b) To handle file operations.", "c) To manage web requests.", "d) To manage threads."], "answer": "a"},
        {"id": 232, "question": "What is the difference between `is` and `==`?", "options": ["a) `is` checks for value equality, `==` checks for identity.", "b) `is` checks for object identity, `==` checks for value equality.", "c) They are identical.", "d) `is` is a logical operator, `==` is a comparison operator."], "answer": "b"},
        {"id": 233, "question": "What is a `decorator`?", "options": ["a) A design pattern for enhancing a function's behavior.", "b) A special type of class.", "c) A way to handle errors.", "d) A loop control structure."], "answer": "a"},
        {"id": 234, "question": "What is the purpose of the `async`/`await` keywords?", "options": ["a) To handle synchronous code.", "b) To define and run coroutines for asynchronous programming.", "c) To handle multithreading.", "d) To handle errors."], "answer": "b"},
        {"id": 235, "question": "What is the purpose of the `collections.defaultdict`?", "options": ["a) To create a dictionary with default values for missing keys.", "b) To create an ordered dictionary.", "c) To create a dictionary that is a subclass of `dict`.", "d) To create a dictionary that can handle any key."], "answer": "a"},
        {"id": 236, "question": "How do you create a dynamic, new class at runtime?", "options": ["a) `type('MyClass', (object,), {})`", "b) `class MyClass(): pass`", "c) `create_class('MyClass')`", "d) `new_class('MyClass')`"], "answer": "a"},
        {"id": 237, "question": "What is a `metaclass`?", "options": ["a) A class that inherits from another class.", "b) A class whose instances are also classes.", "c) A special type of function.", "d) A class with no methods."], "answer": "b"},
        {"id": 238, "question": "What is the purpose of `**kwargs`?", "options": ["a) To pass a variable number of non-keyword arguments.", "b) To pass a variable number of keyword arguments.", "c) To pass a list of arguments.", "d) To unpack a dictionary into arguments."], "answer": "b"},
        {"id": 239, "question": "What is a `generator expression`?", "options": ["a) A list comprehension with parentheses.", "b) A dictionary comprehension.", "c) A set of expressions.", "d) A regular function."], "answer": "a"},
        {"id": 240, "question": "What is a `try...except...finally` block?", "options": ["a) A block of code that handles exceptions.", "b) A block of code that handles exceptions and always executes a cleanup action.", "c) A block of code that handles loops.", "d) A block of code that defines a function."], "answer": "b"},
        {"id": 241, "question": "What is a `with` statement used for?", "options": ["a) To create a new function.", "b) To ensure resources are properly managed (e.g., file closing).", "c) To handle exceptions.", "d) To define a new class."], "answer": "b"},
        {"id": 242, "question": "What is the output of `print(isinstance(1, (int, float)))`?", "options": ["a) `True`", "b) `False`", "c) `1`", "d) `(int, float)`"], "answer": "a"},
        {"id": 243, "question": "What is the purpose of `__slots__`?", "options": ["a) To create a new method.", "b) To save memory by explicitly declaring object attributes.", "c) To make a class immutable.", "d) To make a class a static class."], "answer": "b"},
        {"id": 244, "question": "What is a `GIL`?", "options": ["a) A lock that allows only one thread to execute at a time.", "b) A feature that allows parallel execution.", "c) A type of security feature.", "d) A module for multithreading."], "answer": "a"},
        {"id": 245, "question": "What is the difference between a `process` and a `thread`?", "options": ["a) A process is lightweight, a thread is heavy.", "b) A process has its own memory space, while threads within a process share memory.", "c) A thread has its own memory space, while processes share memory.", "d) They are identical."], "answer": "b"},
        {"id": 246, "question": "What is a `dataclass`?", "options": ["a) A class for storing data.", "b) A class with no methods.", "c) A decorator that automatically generates special methods for classes.", "d) A class for handling data."], "answer": "c"},
        {"id": 247, "question": "What is the purpose of `asyncio`?", "options": ["a) To handle synchronous code.", "b) To write concurrent code using the `async`/`await` syntax.", "c) To handle multithreading.", "d) To handle errors."], "answer": "b"},
        {"id": 248, "question": "What is a `closure`?", "options": ["a) A function that returns another function.", "b) A function that has access to variables from an outer function's scope.", "c) A function that is created at runtime.", "d) A function that cannot be modified."], "answer": "b"},
        {"id": 249, "question": "What is a `namedtuple`?", "options": ["a) A tuple with a name.", "b) A factory function for creating tuple subclasses with named fields.", "c) A special list.", "d) An immutable dictionary."], "answer": "b"},
        {"id": 250, "question": "What is the purpose of `__init__` and `__new__`?", "options": ["a) `__init__` creates the instance, `__new__` initializes it.", "b) `__new__` creates the instance, `__init__` initializes it.", "c) They are identical.", "d) `__new__` is only used for singletons."], "answer": "b"},
        {"id": 251, "question": "What is `memoization` in Python?", "options": ["a) A technique for storing results of function calls to avoid recomputing.", "b) A method for storing data in memory.", "c) A type of data structure.", "d) A way to handle memory leaks."], "answer": "a"},
        {"id": 252, "question": "What is a **descriptor**?", "options": ["a) A class that implements the descriptor protocol (`__get__`, `__set__`, `__delete__`).", "b) A special type of dictionary.", "c) A function that describes a class.", "d) An attribute of a class."], "answer": "a"},
        {"id": 253, "question": "What is the purpose of the `functools.lru_cache` decorator?", "options": ["a) To limit the number of arguments a function can take.", "b) To cache function results for efficiency.", "c) To log function calls.", "d) To create a new function."], "answer": "b"},
        {"id": 254, "question": "What is the output of `print(type(int))`?", "options": ["a) `<class 'int'>`", "b) `<class 'type'>`", "c) `<class 'class'>`", "d) `<class 'object'>`"], "answer": "b"},
        {"id": 255, "question": "What is a **context manager**?", "options": ["a) A special dictionary.", "b) An object that defines the `__enter__` and `__exit__` methods.", "c) A function that manages threads.", "d) A class for handling exceptions."], "answer": "b"},
        {"id": 256, "question": "What is the output of `print(2 ** 3)`?", "options": ["a) 6", "b) 8", "c) 9", "d) 5"], "answer": "b"},
        {"id": 257, "question": "How do you check for object identity?", "options": ["a) `==`", "b) `is`", "c) `in`", "d) `or`"], "answer": "b"},
        {"id": 258, "question": "What is a `super()` function used for?", "options": ["a) To call a method from a parent class.", "b) To call a method from a child class.", "c) To create a new class.", "d) To create a new object."], "answer": "a"},
        {"id": 259, "question": "What is the output of `print(isinstance([], list))`?", "options": ["a) `True`", "b) `False`", "c) `[]`", "d) `list`"], "answer": "a"},
        {"id": 260, "question": "What is the difference between a `process` and a `thread`?", "options": ["a) A process is lightweight, a thread is heavy.", "b) A process has its own memory space, while threads within a process share memory.", "c) A thread has its own memory space, while processes share memory.", "d) They are identical."], "answer": "b"},
        {"id": 261, "question": "What is a `closure`?", "options": ["a) A function that returns another function.", "b) A function that has access to variables from an outer function's scope, even after the outer function has finished executing.", "c) A function that is created at runtime.", "d) A function that cannot be modified."], "answer": "b"},
        {"id": 262, "question": "What is `monkey patching`?", "options": ["a) Modifying a class or module at runtime.", "b) Fixing bugs in an application.", "c) Creating a new class.", "d) A type of security patch."], "answer": "a"},
        {"id": 263, "question": "What is a `dataclass`?", "options": ["a) A class for storing data.", "b) A class with no methods.", "c) A decorator that automatically generates special methods for classes.", "d) A class for handling data."], "answer": "c"},
        {"id": 264, "question": "What is `type hinting` (PEP 484)?", "options": ["a) A way to enforce data types at runtime.", "b) A way to specify variable types for better readability and static analysis.", "c) A type of error.", "d) A way to create new data types."], "answer": "b"},
        {"id": 265, "question": "What is the purpose of the `collections.namedtuple`?", "options": ["a) A tuple with a name.", "b) A factory function for creating tuple subclasses with named fields.", "c) A special list.", "d) An immutable dictionary."], "answer": "b"},
        {"id": 266, "question": "What is the output of `print('hello' is 'hello')`?", "options": ["a) `True`", "b) `False`", "c) `Error`", "d) `None`"], "answer": "a"},
        {"id": 267, "question": "What is the purpose of `__slots__` in a class?", "options": ["a) To create a new method.", "b) To save memory by explicitly declaring object attributes.", "c) To make a class immutable.", "d) To make a class a static class."], "answer": "b"},
        {"id": 268, "question": "What is the output of `print(type(1.0))`?", "options": ["a) `<class 'float'>`", "b) `<class 'int'>`", "c) `<class 'str'>`", "d) `<class 'number'>`"], "answer": "a"},
        {"id": 269, "question": "What is a `weak reference`?", "options": ["a) A reference that does not prevent an object from being garbage collected.", "b) A reference to a variable that is weak.", "c) A reference to a function.", "d) A reference to a global variable."], "answer": "a"},
        {"id": 270, "question": "What is the purpose of the `functools.partial`?", "options": ["a) To create a new class.", "b) To fix a function's arguments to a specific value.", "c) To combine two functions.", "d) To create a new function."], "answer": "b"},
        {"id": 271, "question": "What is a `GIL`?", "options": ["a) A lock that allows only one thread to execute at a time.", "b) A feature that allows parallel execution.", "c) A type of security feature.", "d) A module for multithreading."], "answer": "a"},
        {"id": 272, "question": "What is a `metaclass`?", "options": ["a) A class that inherits from another class.", "b) A class whose instances are also classes.", "c) A special type of function.", "d) A class with no methods."], "answer": "b"},
        {"id": 273, "question": "What is the purpose of the `__call__` method?", "options": ["a) To make an object callable like a function.", "b) To call a method from a parent class.", "c) To call a method from a child class.", "d) To define a new function."], "answer": "a"},
        {"id": 274, "question": "What is the output of `print(type([]))`?", "options": ["a) `<class 'list'>`", "b) `<class 'array'>`", "c) `<class 'tuple'>`", "d) `<class 'NoneType'>`"], "answer": "a"},
        {"id": 275, "question": "How can you create a dynamic, new class at runtime?", "options": ["a) `type('MyClass', (object,), {})`", "b) `class MyClass(): pass`", "c) `create_class('MyClass')`", "d) `new_class('MyClass')`"], "answer": "a"},
        {"id": 276, "question": "What is the purpose of `asyncio`?", "options": ["a) To handle synchronous code.", "b) To write concurrent code using the `async`/`await` syntax.", "c) To handle multithreading.", "d) To handle errors."], "answer": "b"},
        {"id": 277, "question": "What is a `closure`?", "options": ["a) A function that returns another function.", "b) A function that has access to variables from an outer function's scope.", "c) A function that is created at runtime.", "d) A function that cannot be modified."], "answer": "b"},
        {"id": 278, "question": "What is a `generator expression`?", "options": ["a) A list comprehension with parentheses.", "b) A dictionary comprehension.", "c) A set of expressions.", "d) A regular function."], "answer": "a"},
        {"id": 279, "question": "What is the purpose of `**kwargs`?", "options": ["a) To pass a variable number of non-keyword arguments.", "b) To pass a variable number of keyword arguments.", "c) To pass a list of arguments.", "d) To unpack a dictionary into arguments."], "answer": "b"},
        {"id": 280, "question": "What is a `try...except...finally` block?", "options": ["a) A block of code that handles exceptions.", "b) A block of code that handles exceptions and always executes a cleanup action.", "c) A block of code that handles loops.", "d) A block of code that defines a function."], "answer": "b"},
        {"id": 281, "question": "What is the output of `print(isinstance(1, (int, float)))`?", "options": ["a) `True`", "b) `False`", "c) `1`", "d) `(int, float)`"], "answer": "a"},
        {"id": 282, "question": "What is the purpose of `functools.wraps`?", "options": ["a) To create a new class.", "b) To preserve the original function's metadata when using decorators.", "c) To wrap a function with another function.", "d) To decorate a class."], "answer": "b"},
        {"id": 283, "question": "What is the difference between `is` and `==`?", "options": ["a) `is` checks for value equality, `==` checks for identity.", "b) `is` checks for object identity, `==` checks for value equality.", "c) They are identical.", "d) `is` is a logical operator, `==` is a comparison operator."], "answer": "b"},
        {"id": 284, "question": "What is the purpose of `__init__` and `__new__`?", "options": ["a) `__init__` creates the instance, `__new__` initializes it.", "b) `__new__` creates the instance, `__init__` initializes it.", "c) They are identical.", "d) `__new__` is only used for singletons."], "answer": "b"},
        {"id": 285, "question": "What is the purpose of the `gc` module?", "options": ["a) To manage garbage collection.", "b) To handle file operations.", "c) To manage web requests.", "d) To manage threads."], "answer": "a"},
        {"id": 286, "question": "What is a `decorator`?", "options": ["a) A design pattern for enhancing a function's behavior.", "b) A special type of class.", "c) A way to handle errors.", "d) A loop control structure."], "answer": "a"},
        {"id": 287, "question": "What is the purpose of the `collections.defaultdict`?", "options": ["a) To create a dictionary with default values for missing keys.", "b) To create an ordered dictionary.", "c) To create a dictionary that is a subclass of `dict`.", "d) To create a dictionary that can handle any key."], "answer": "a"},
        {"id": 288, "question": "What is a `generator`?", "options": ["a) A function that returns a value and exits.", "b) A function that yields a value and can be resumed later.", "c) A class that generates random numbers.", "d) A decorator."], "answer": "b"},
        {"id": 289, "question": "What is a `property`?", "options": ["a) An attribute of a class.", "b) A way to give a class attribute the behavior of a method.", "c) A method that belongs to a specific object instance.", "d) A special type of function."], "answer": "b"},
        {"id": 290, "question": "What is a `classmethod`?", "options": ["a) A method that belongs to a specific object instance.", "b) A method that belongs to the class itself, not an instance.", "c) A method that can only be called from an instance.", "d) A method for a decorator."], "answer": "b"},
        {"id": 291, "question": "What is a `staticmethod`?", "options": ["a) A method that takes the instance as the first argument.", "b) A method that takes the class as the first argument.", "c) A method that doesn't implicitly pass `self` or `cls`.", "d) A method that cannot be overridden."], "answer": "c"},
        {"id": 292, "question": "What is a `descriptor`?", "options": ["a) A class that implements the descriptor protocol (`__get__`, `__set__`, `__delete__`).", "b) A special type of dictionary.", "c) A function that describes a class.", "d) An attribute of a class."], "answer": "a"},
        {"id": 293, "question": "What is the purpose of `functools.lru_cache`?", "options": ["a) To limit the number of arguments a function can take.", "b) To cache function results for efficiency.", "c) To log function calls.", "d) To create a new function."], "answer": "b"},
        {"id": 294, "question": "What is a `try...except...finally` block?", "options": ["a) A block of code that handles exceptions.", "b) A block of code that handles exceptions and always executes a cleanup action.", "c) A block of code that handles loops.", "d) A block of code that defines a function."], "answer": "b"},
        {"id": 295, "question": "What is `memoization` in Python?", "options": ["a) A technique for storing results of function calls to avoid recomputing.", "b) A method for storing data in memory.", "c) A type of data structure.", "d) A way to handle memory leaks."], "answer": "a"},
        {"id": 296, "question": "How do you create a dynamic, new class at runtime?", "options": ["a) `type('MyClass', (object,), {})`", "b) `class MyClass(): pass`", "c) `create_class('MyClass')`", "d) `new_class('MyClass')`"], "answer": "a"},
        {"id": 297, "question": "What is the output of `print(isinstance(1, (int, float)))`?", "options": ["a) `True`", "b) `False`", "c) `1`", "d) `(int, float)`"], "answer": "a"},
        {"id": 298, "question": "What is a `namedtuple`?", "options": ["a) A tuple with a name.", "b) A factory function for creating tuple subclasses with named fields.", "c) A special list.", "d) An immutable dictionary."], "answer": "b"},
        {"id": 299, "question": "What is a `closure`?", "options": ["a) A function that returns another function.", "b) A function that has access to variables from an outer function's scope.", "c) A function that is created at runtime.", "d) A function that cannot be modified."], "answer": "b"},
        {"id": 300, "question": "What is a `metaclass`?", "options": ["a) A class that inherits from another class.", "b) A class whose instances are also classes.", "c) A special type of function.", "d) A class with no methods."], "answer": "b"},
    ]
};

// Function to get random questions for a round
export function getRandomQuestions(difficulty: string, count: number = 10): Question[] {
  const questions = quizData[difficulty] || quizData.basic;
  const shuffled = [...questions].sort(() => Math.random() - 0.5);
  return shuffled.slice(0, count);
}